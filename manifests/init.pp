# Module only for physical machines that sets up lm_sensors
class lm_sensors (
  Boolean $remove_volt                      = $::lm_sensors::params::remove_volt,
  Enum['present','absent'] $package_ensure  = $::lm_sensors::params::package_ensure,
  Enum['running','stopped'] $service_ensure = $::lm_sensors::params::service_ensure,
  Stdlib::Absolutepath $config_file         = $::lm_sensors::params::config_file,
  Stdlib::Absolutepath $sensorsd_dir        = $::lm_sensors::params::sensorsd_dir,
  String $package                           = $::lm_sensors::params::package,
  String $exec_command                      = $::lm_sensors::params::exec_command,
) inherits lm_sensors::params {

  if $::virtual == 'physical' {
    # Install lm_sensors
    package { 'lm_sensors':
      ensure => $package_ensure,
      name   => $package,
      notify => Exec['sensors-detect'],
    }

    # create sensors.d dir
    if $remove_volt == true {
      file {
        $sensorsd_dir:
          ensure  => directory,
          owner   => 'root',
          group   => 'root',
          mode    => '0755',
          require => Package['lm_sensors'];
        "${sensorsd_dir}/sensorsd.conf":
          ensure  => file,
          owner   => 'root',
          group   => 'root',
          mode    => '0644',
          require => File[$sensorsd_dir],
          content => template(lm_sensors/sensorsd.conf);
      }
    }

    # Scan for hardware sensors
    exec { 'sensors-detect':
      command => $exec_command,
      unless  => "/bin/grep \"Generated by sensors-detect\" ${config_file}",
      notify  => Service['lm_sensors'],
      require => Package['lm_sensors'],
    }

    # Start lm_sensors service
    service { 'lm_sensors':
      ensure     => $service_ensure,
      name       => $package,
      enable     => true,
      hasrestart => true,
      require    => Exec['sensors-detect'],
    }
  }
}
